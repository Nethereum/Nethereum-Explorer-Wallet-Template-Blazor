@using NethereumBlazor.ViewModels
@using ReactiveUI;
@inject BlocksViewModel BlocksViewModel
<div class="card">
    <div class="card-header">
        <div class="d-flex align-items-center">
            <h5>Blocks</h5>
                @if (BlocksViewModel.Loading)
                {
                    <div class="spinner-grow spinner-grow-sm ml-auto" role="status" aria-hidden="true"></div>
                }
        </div>
    </div>
    <div class="card-body">
        @foreach (var block in BlocksViewModel.Blocks.Items.OrderByDescending(x => x.Number))
                    {
        <div class="latest-block">
            <div class="latest-block-highlight">
                <span><a class="badge badge-dark" href="block/@block.Number">Block @block.Number</a></span>
                <small>
                    <div>@string.Format(@"> {0:mm} mins {0:ss} secs ago", (DateTime.Now - block.Time))</div>
                </small>
                <small>
                    <div>@block.Time</div>
                </small>
            </div>
            <div>
                Mined By: @block.Author
                <p></p>
                <p><b><a href="block/@block.Number">@block.TransactionCount Transactions</a></b></p>
            </div>
        </div>
                    }
    </div>
</div>

@functions {

    protected override void OnInit() {
        //refreshing the seconds countdown
        System.Reactive.Linq.Observable.Timer(TimeSpan.FromMilliseconds(500), TimeSpan.FromMilliseconds(2000), RxApp.MainThreadScheduler)
                .Subscribe( _ => StateHasChanged());

        BlocksViewModel.Blocks.Connect().Subscribe(_ => StateHasChanged());

        BlocksViewModel.WhenAnyValue(x => x.Loading).Subscribe(_ => StateHasChanged());
    }
}
